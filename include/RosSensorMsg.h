// Generated by gencpp from file std_msgs/ColorRGBA.msg
// DO NOT EDIT!


#ifndef STD_MSGS_MESSAGE_SENSOR_MSG_H
#define STD_MSGS_MESSAGE_SENSOR_MSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include "SensorData.h"

namespace SensorFusion
{




typedef ::SensorFusion::SensorDataMsg_<std::allocator<void> > SensorDataMsg;

typedef boost::shared_ptr< ::SensorFusion::SensorDataMsg > SensorDataMsgPtr;
typedef boost::shared_ptr< ::SensorFusion::SensorDataMsg const> SensorDataMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::SensorFusion::SensorDataMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::SensorFusion::SensorDataMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace std_msgs

namespace ros
{
namespace message_traits
{

template <class ContainerAllocator>
struct IsFixedSize< ::SensorFusion::SensorDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::SensorFusion::SensorDataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::SensorFusion::SensorDataMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::SensorFusion::SensorDataMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::SensorFusion::SensorDataMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::SensorFusion::SensorDataMsg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::SensorFusion::SensorDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "78b4c94bb5e51133a7d0bd8975a82a1b";
  }

  static const char* value(const ::SensorFusion::SensorDataMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x78b4c94bb5e51133ULL;
  static const uint64_t static_value2 = 0xa7d0bd8975a82a1bULL;
};

template<class ContainerAllocator>
struct DataType< ::SensorFusion::SensorDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "SensorFusion/SensorDataMsg";
  }

  static const char* value(const ::SensorFusion::SensorDataMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::SensorFusion::SensorDataMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 timestamp_\n\
uint32 object_count_    \n\
SensorPoint[] sensor_list_data_  \n\
\n\
================================================================================\n\
MSG: SensorFusion/SensorPoint\n\
uint64 object_id_\n\
float64 x_position_\n\
float64 y_position_  \n\
";
  }

  static const char* value(const ::SensorFusion::SensorDataMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::SensorFusion::SensorDataMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.timestamp_);
      stream.next(m.object_count_);
      stream.next(m.sensor_list_data_);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ColorRGBA_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::SensorFusion::SensorDataMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::SensorFusion::SensorDataMsg_<ContainerAllocator>& v)
  {
    s << indent << "timestamp_: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.timestamp_);
    s << indent << "object_count_: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.object_count_);
    s << indent << "sensor_list_data_[]" << std::endl;
    for (size_t i = 0; i < v.sensor_list_data_.size(); ++i)
    {
      s << indent << "  sensor_list_data_[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::SensorFusion::SensorPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.sensor_list_data_[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // STD_MSGS_MESSAGE_SENSOR_MSG_H
